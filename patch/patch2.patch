diff --git a/src/main/java/com/mojang/authlib/yggdrasil/YggdrasilMinecraftSessionService.java b/src/main/java/com/mojang/authlib/yggdrasil/YggdrasilMinecraftSessionService.java
index 771de3f..04f18c0 100644
--- a/src/main/java/com/mojang/authlib/yggdrasil/YggdrasilMinecraftSessionService.java
+++ b/src/main/java/com/mojang/authlib/yggdrasil/YggdrasilMinecraftSessionService.java
@@ -43,6 +43,18 @@ import java.net.URL;
 import org.apache.logging.log4j.Logger;
 import com.mojang.authlib.minecraft.HttpMinecraftSessionService;
 
+import java.net.URLDecoder;
+import java.net.URLConnection;
+import java.net.URLStreamHandler;
+import java.net.URLStreamHandlerFactory;
+import java.net.HttpURLConnection;
+import java.net.Proxy;
+import java.io.ByteArrayInputStream;
+import java.io.InputStream;
+import java.io.IOException;
+import java.util.regex.Pattern;
+import java.util.regex.Matcher;
+
 public class YggdrasilMinecraftSessionService extends HttpMinecraftSessionService
 {
     private static final String[] WHITELISTED_DOMAINS;
@@ -53,6 +65,10 @@ public class YggdrasilMinecraftSessionService extends HttpMinecraftSessionServic
     private final PublicKey publicKey;
     private final Gson gson;
     private final LoadingCache<GameProfile, GameProfile> insecureProfiles;
+
+    static {
+        URL.setURLStreamHandlerFactory(new DataURLStreamHandlerFactory());
+    }
     
     protected YggdrasilMinecraftSessionService(final YggdrasilAuthenticationService authenticationService) {
         super(authenticationService);
@@ -138,7 +154,8 @@ public class YggdrasilMinecraftSessionService extends HttpMinecraftSessionServic
             return new HashMap<MinecraftProfileTexture.Type, MinecraftProfileTexture>();
         }
         for (final Map.Entry<MinecraftProfileTexture.Type, MinecraftProfileTexture> entry : result.getTextures().entrySet()) {
-            if (!isWhitelistedDomain(entry.getValue().getUrl())) {
+            final String url = entry.getValue().getUrl();
+            if (!url.startsWith("data:") && !isWhitelistedDomain(url)) {
                 YggdrasilMinecraftSessionService.LOGGER.error("Textures payload has been tampered with (non-whitelisted domain)");
                 return new HashMap<MinecraftProfileTexture.Type, MinecraftProfileTexture>();
             }
@@ -207,3 +224,98 @@ public class YggdrasilMinecraftSessionService extends HttpMinecraftSessionServic
         CHECK_URL = HttpAuthenticationService.constantURL("https://sessionserver.mojang.com/session/minecraft/hasJoined");
     }
 }
+
+class DataHttpURLConnection extends HttpURLConnection{
+
+    private final String protocol;
+    private final String mimetype;
+    private final String encoding;
+    private final String filepath;
+
+    public DataHttpURLConnection(URL url){
+        super(url);
+
+        protocol = url.getProtocol();
+        mimetype = url.getAuthority();
+        encoding = url.getUserInfo();
+        filepath = url.getPath();
+    }
+
+    @Override
+    public InputStream getInputStream()
+        throws IOException
+    {
+        if (encoding.equals("base64")) {
+            return new ByteArrayInputStream(Base64.decodeBase64(filepath));
+        } else {
+            return new ByteArrayInputStream(URLDecoder.decode(filepath, encoding.isEmpty() ? "utf-8" : encoding).getBytes());
+        }
+    }
+
+    @Override
+    public int getResponseCode(){
+        return 200;
+    }
+
+    @Override
+    public boolean usingProxy(){
+        return false;
+    }
+
+    @Override
+    public void connect(){
+    }
+
+    @Override
+    public void disconnect(){
+    }
+}
+
+class DataURLStreamHandler extends URLStreamHandler{
+
+    private Pattern pattern = Pattern.compile("^([^:]+?):(?:([^;]+?);)?(?:charset=)?([^,]+?)?,(.*)$");
+
+    @Override
+    protected void parseURL(URL url, String spec, int start, int end){
+        final Matcher matcher = pattern.matcher(spec);
+
+        if (matcher.find() && matcher.group(1).toLowerCase().equals("data")) {
+            final String protocol = matcher.group(1).toLowerCase();
+            final String mimetype = matcher.group(2) != null ? matcher.group(2).toLowerCase() : "";
+            final String encoding = matcher.group(3) != null ? matcher.group(3).toLowerCase() : "";
+            final String filepath = matcher.group(4);
+
+            setURL(url, protocol, "", 0, mimetype, encoding, filepath, "", "");
+        }
+    }
+
+    @Override
+    protected URLConnection openConnection(URL url){
+        return new DataHttpURLConnection(url);
+    }
+
+    @Override
+    protected URLConnection openConnection(URL url, Proxy proxy){
+        return openConnection(url);
+    }
+}
+
+class DataURLStreamHandlerFactory implements URLStreamHandlerFactory{
+
+    public URLStreamHandler createURLStreamHandler(String protocol){
+        switch (protocol) {
+            case "data":
+                return new DataURLStreamHandler();
+            case "file":
+                return new sun.net.www.protocol.file.Handler();
+            case "http":
+                return new sun.net.www.protocol.http.Handler();
+            case "https":
+                return new sun.net.www.protocol.https.Handler();
+            case "jar":
+                return new sun.net.www.protocol.jar.Handler();
+            default:
+                return null;
+        }
+    }
+}
